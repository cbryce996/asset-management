@startuml

package Domain {

    package System {

        System --o IPAddress
        System --o MACAddress
        System --* Software

        class System <<AggregateRoot>> {
            + SystemName Name
            + SystemId Id
            + IPAddress Ip
            + MACAddress Mac
            + List<Software> InstalledSoftware
            + bool AddSoftware(Software)
            + void RemoveSoftware(Software)
        }

        class IPAddress <<ValueObject>> {
            + string Ip
        }

        class MACAddress <<ValueObject>> {
            + string MACAddress
        }

        class Software <<ValueObject>> {
            + string Name
            + string Version
            + string Manufacturer
        }

    }

    package User {

        class User <<AggregateRoot>> {
            + Guid Id
            + string Username
            + string Password
        }

    }

}

package Application {

     package Auth {

        AuthServices --o UserDTO
        AuthServices --* User
        
        class AuthServices {
            - IUnitOfWork unitOfWork
            + CheckIfUserExists(UserDTO) : UserDTO
        }

        class UserDTO {
            + srting Id
            + string Username
            + string Password
        }

    }

    package Interfaces {

        IUnitOfWork --o IRepository

        interface IUnitOfWork {
            + IRepository Repository
        }

        interface IRepository {

        }

    }

    package Admin {

        AdminServices --o SoftwareDTO
        AdminServices --o SystemDTO
        AdminServices --o IUnitOfWork
        AdminServices --* System

        class AdminServices {
            - IUnitOfWork UnitOfWork
            + GetAllSystems() : List<SystemDTO>
            + GetSystemById(string) : SystemDTO
            + AddSystem(SystemDTO) : SystemDTO
            + AddSoftwareToSystem(SoftwareDTO, string) : SoftwareDTO
            + DeleteSoftware(SoftwareDTO, string)
            + DeleteSystem(string)
        }

        class SoftwareDTO {
            + string Id
            + string Name
            + string Manufacturer
            + string Version
        }

        class SystemDTO {
            + string Id
            + string Name
            + string Ip
            + string Mac
        }

    }

}

package DesktopUI {

    HomeController --o AdminServices

    class HomeController {
        - AdminServices adminServices
    }

    AccountController --o AuthServices

    class AccountController {
        - AuthServices authServices
    }

}

package Infrastructure {

    package Repository {

        SystemRepository --> Repository
        UserRepository --> Repository

        class SystemRepository {
            + List<System> Systems
        }

        class UserRepository {
            + List<User> Users
        }

        Repository --> IRepository

        class Repository {
            + Entities : List<T>
            + bool Add(T)
            + List<T> All()
            + Asset Get(id)
            + bool Remove(id)
        }

    }

    package Persistence {

        UnitOfWork --o DbContext
        UnitOfWork --o SystemRepository
        UnitOfWork --o UserRepository
        UnitOfWork --> IUnitOfWork

        class UnitOfWork {
            + Asset : Repository
            + DbContext : DbContext
            + void Start()
            + void Complete()
            + void Dispose()
        }

        class DbContext {
            + Connection : String
            + bool Query(String)
            + bool Connect()
        }

    }

}
@enduml